{"version":3,"file":"static/js/967.7a2aee17.chunk.js","mappings":"sSAGaA,EAAcC,EAAAA,GAAAA,IAAH,yEAKXC,GAAgBD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,iF,SCD1B,EAJiB,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OAAO,SAAC,KAAD,CAAMD,GAAIA,EAAV,SAAeC,GACvB,E,UCMKC,GAAQC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAkFnB,EAhFqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAGaC,GACTC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,IAAU,YADnBC,QAAWH,QAGPI,GAAWC,EAAAA,EAAAA,MACXC,GAAWL,EAAAA,EAAAA,QAAM,oBAACG,EAASG,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAEhDC,EAAAA,EAAAA,YAAU,WACRZ,GAAa,GACb,IAAMa,EAAS,mCAAG,6GAEIC,EAAAA,EAAAA,eAAmBX,GAFvB,OAERY,EAFQ,OAGdjB,EAASiB,GAHK,gDAKdb,EAAS,KAAMc,SALD,yBAOdhB,GAAa,GAPC,4EAAH,qDAUfa,GACD,GAAE,CAACV,IAEJ,IAAQc,EAAuDpB,EAAvDoB,MAAOC,EAAgDrB,EAAhDqB,aAAcC,EAAkCtB,EAAlCsB,SAAUC,EAAwBvB,EAAxBuB,OAAQC,EAAgBxB,EAAhBwB,YAE/C,OACE,4BACE,SAAC,EAAD,CAAU7B,GAAIiB,EAASH,QAAvB,qBACCL,GAAQ,SAACP,EAAD,CAAOsB,QAASf,IAAY,GACpCF,GACC,SAACuB,EAAA,EAAD,KAEA,iCACE,UAAClC,EAAD,YACE,gBACEmC,IACEF,EAAW,6CAC+BA,GACtC,GAENG,IAAG,+BAA0BP,GAC7BQ,MAAM,QACNC,OAAO,WAET,2BACG,KACD,0BACGT,EADH,KACWU,EAAAA,EAAAA,IAAWT,EAAc,QADpC,QAGA,sCACA,uBAAIC,KACJ,oCACA,wBACGC,EACCA,EAAOQ,KAAI,SAAAC,GAAC,OAAI,wBAAgBA,EAAEC,MAATD,EAAEE,GAAf,KAEZ,gDAMR,2BACE,yBACE,SAACzC,EAAD,CAAeE,GAAG,OAAlB,qBAEF,yBACE,SAACF,EAAD,CAAeE,GAAG,SAAlB,0BAGJ,SAAC,KAAD,SAKT,C","sources":["pages/MovieDetails/MovieDetails.styled.js","components/BackLink/BackLink.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const WraperMovie = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 5px;\n`;\nexport const StyledNavLink = styled(NavLink)`\n  color: #212121;\n\n  &.active {\n    color: red;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst BackLink = ({ to, children }) => {\n  return <Link to={to}>{children}</Link>;\n};\n\nexport default BackLink;\n\nBackLink.propTypes = {\n  to: PropTypes.shape({\n    hash: PropTypes.string,\n    key: PropTypes.string,\n    pathname: PropTypes.string,\n    search: PropTypes.string,\n    state: PropTypes.shape({\n      hash: PropTypes.string,\n      key: PropTypes.string,\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n    }),\n  }),\n  children: PropTypes.string,\n};\n","import { useEffect, useRef, useState, lazy } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport api from '../../services';\nimport dateFormat from 'dateformat';\n\nimport { WraperMovie, StyledNavLink } from './MovieDetails.styled';\n\nimport BackLink from 'components/BackLink';\nimport Loading from 'components/Loading';\n\nconst Error = lazy(() => import('../../components/Error'));\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const {\n    current: { movieId },\n  } = useRef(useParams('movieId'));\n\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const res = await api.fetchInfoMovie(movieId);\n        setMovie(res);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  const { title, release_date, overview, genres, poster_path } = movie;\n\n  return (\n    <div>\n      <BackLink to={backLink.current}>Go back</BackLink>\n      {error ? <Error message={error} /> : ''}\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <>\n          <WraperMovie>\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/original${poster_path}`\n                  : ''\n              }\n              alt={`poster for the movie ${title}`}\n              width=\"200px\"\n              height=\"300px\"\n            />\n            <div>\n              {' '}\n              <h2>\n                {title}({dateFormat(release_date, 'yyyy')})\n              </h2>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              <ul>\n                {genres ? (\n                  genres.map(g => <li key={g.id}>{g.name}</li>)\n                ) : (\n                  <li>Not Genres</li>\n                )}\n              </ul>\n            </div>\n          </WraperMovie>\n\n          <ul>\n            <li>\n              <StyledNavLink to=\"cast\">Cast</StyledNavLink>\n            </li>\n            <li>\n              <StyledNavLink to=\"review\">Review</StyledNavLink>\n            </li>\n          </ul>\n          <Outlet />\n        </>\n      )}\n    </div>\n  );\n};\nexport default MovieDetails;\n"],"names":["WraperMovie","styled","StyledNavLink","NavLink","to","children","Error","lazy","useState","movie","setMovie","isLoading","setIsLoading","error","setError","movieId","useRef","useParams","current","location","useLocation","backLink","state","from","useEffect","fetchData","api","res","message","title","release_date","overview","genres","poster_path","Loading","src","alt","width","height","dateFormat","map","g","name","id"],"sourceRoot":""}