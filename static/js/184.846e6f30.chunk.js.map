{"version":3,"file":"static/js/184.846e6f30.chunk.js","mappings":"0RAcMA,GAAQC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAEbC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACjBE,GAAYF,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAoEvB,EAlEe,WAAO,IAAD,EACnB,GAAwCG,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,EAAW,UAAGT,EAAaU,IAAI,gBAApB,QAAgC,GAC3CC,GAAWC,EAAAA,EAAAA,MACXC,GAAiBC,EAAAA,EAAAA,QAAOL,GAExBM,GAAoBC,EAAAA,EAAAA,aAAW,mCAAC,WAAMC,GAAN,8EACpCX,GAAa,GADuB,kBAGhBY,EAAAA,EAAAA,kBAAsBD,GAHN,OAG5BE,EAH4B,OAIlCf,EAAgBe,EAAIC,KAAKC,SAJS,gDAMlCb,EAAS,KAAMc,SANmB,yBAQlChB,GAAa,GARqB,4EAAD,sDAUlC,KAEHiB,EAAAA,EAAAA,YAAU,WACRjB,GAAa,GACkB,KAA3BO,EAAeW,SAIfX,EAAeW,UAAYf,GAC7BM,EAAkBF,EAAeW,SAEnClB,GAAa,IANXA,GAAa,EAOhB,GAAE,CAACS,EAAmBN,IAgBvB,OACE,gCACGF,GAAQ,SAACZ,EAAD,CAAO2B,QAASf,IAAY,IACrC,qCACA,UAAC,EAAAkB,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,WACE,SAAC9B,EAAD,CAAW+B,SAdI,SAAAX,GACE,KAAjBA,EAAMY,SANc,SAAAZ,GAExBhB,EAD6B,KAAVgB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,CAOCa,CAAkBb,GAClBF,EAAkBE,IAJhBc,QAAQC,IAAI,sEAKf,KAQK,SAAClC,EAAD,CACEO,UAAWA,EACX4B,OAAQ9B,EACRQ,SAAUA,QAId,SAAC,KAAD,MAGL,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport {\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  lazy,\n  Suspense,\n} from 'react';\n\nimport api from '../../services';\n\nimport Loading from '../../components/Loading';\n\nconst Error = lazy(() => import('../../components/Error'));\n\nconst SearchBox = lazy(() => import('components/SearchBox'));\nconst MovieList = lazy(() => import('components/MovieList'));\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const searchQuery = searchParams.get('query') ?? '';\n  const location = useLocation();\n  const firstLoadQuery = useRef(searchQuery);\n\n  const handleFetchMovies = useCallback(async query => {\n    setIsLoading(true);\n    try {\n      const res = await api.fetchSearchsMovie(query);\n      setSearchMovies(res.data.results);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (firstLoadQuery.current === '') {\n      setIsLoading(false);\n      return;\n    }\n    if (firstLoadQuery.current === searchQuery) {\n      handleFetchMovies(firstLoadQuery.current);\n    }\n    setIsLoading(false);\n  }, [handleFetchMovies, searchQuery]);\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleSubmit = query => {\n    if (query.trim() === '') {\n      console.log('заповни поле');\n      return;\n    }\n    updateQueryString(query);\n    handleFetchMovies(query);\n  };\n\n  return (\n    <>\n      {error ? <Error message={error} /> : ''}\n      <div>Movies</div>\n      <Suspense fallback={<Loading />}>\n        <SearchBox onSubmit={handleSubmit} />\n        <MovieList\n          isLoading={isLoading}\n          movies={searchMovies}\n          location={location}\n        />\n      </Suspense>\n\n      <Outlet />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["Error","lazy","SearchBox","MovieList","useSearchParams","searchParams","setSearchParams","useState","searchMovies","setSearchMovies","isLoading","setIsLoading","error","setError","searchQuery","get","location","useLocation","firstLoadQuery","useRef","handleFetchMovies","useCallback","query","api","res","data","results","message","useEffect","current","Suspense","fallback","Loading","onSubmit","trim","updateQueryString","console","log","movies"],"sourceRoot":""}