{"version":3,"file":"static/js/656.9a12e10a.chunk.js","mappings":"4UAGaA,EAAcC,EAAAA,GAAAA,IAAH,iGAMXC,GAAgBD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,iFAObG,EAAmBH,EAAAA,GAAAA,GAAH,gDAGhBI,EAAkBJ,EAAAA,GAAAA,EAAH,gDAGfK,EAAiBL,EAAAA,GAAAA,GAAH,gDAGdM,EAAqBN,EAAAA,GAAAA,EAAH,gDAGlBO,EAAeP,EAAAA,GAAAA,GAAH,gDAGZQ,EAAmBR,EAAAA,GAAAA,GAAH,+FAMhBS,EAAuBT,EAAAA,GAAAA,GAAH,mHAKpBU,EAAuBV,EAAAA,GAAAA,GAAH,gDCvCpBW,GAAiBX,EAAAA,EAAAA,IAAOY,EAAAA,GAAPZ,CAAH,kE,SCI3B,EAJiB,SAAC,GAAsB,IAApBa,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OAAO,SAACH,EAAD,CAAgBE,GAAIA,EAApB,SAAyBC,GACjC,E,UCmBKC,GAAQC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IA8FnB,EA5FqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAGaC,GACTC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,IAAU,YADnBC,QAAWH,QAGPI,GAAWC,EAAAA,EAAAA,MACXC,GAAWL,EAAAA,EAAAA,QAAM,oBAACG,EAASG,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,MAEhDC,EAAAA,EAAAA,YAAU,WACRZ,GAAa,GACb,IAAMa,EAAS,mCAAG,6GAEIC,EAAAA,EAAAA,eAAmBX,GAFvB,OAERY,EAFQ,OAGdjB,EAASiB,GAHK,gDAKdb,EAAS,KAAMc,SALD,yBAOdhB,GAAa,GAPC,4EAAH,qDAUfa,GACD,GAAE,CAACV,IAEJ,IAAQc,EACNpB,EADMoB,MAAOC,EACbrB,EADaqB,aAAcC,EAC3BtB,EAD2BsB,SAAUC,EACrCvB,EADqCuB,OAAQC,EAC7CxB,EAD6CwB,YAAaC,EAC1DzB,EAD0DyB,aAG5D,OACE,4BACE,SAAC,cAAD,CAAsBC,MAAO,CAAEC,KAAM,QAArC,UACE,UAAC,EAAD,CAAUhC,GAAIiB,EAASH,QAAvB,WACG,SAAC,MAAD,IADH,eAKDL,GAAQ,SAACP,EAAD,CAAOsB,QAASf,IAAY,GAEpCF,GACC,SAAC0B,EAAA,EAAD,KAEA,iCACE,UAAC/C,EAAD,YACE,gBACEgD,IACEL,EAAW,6CAC+BA,GACtC,GAENM,IAAG,+BAA0BV,GAC7BW,MAAM,QACNC,OAAO,WAET,4BACE,UAAC/C,EAAD,WACGmC,EADH,MACYa,EAAAA,EAAAA,IAAWZ,EAAc,QADrC,QAGA,UAACnC,EAAD,0BACegD,KAAKC,MAAqB,GAAfV,GAD1B,QAGA,SAACtC,EAAD,wBACA,SAACC,EAAD,UAAqBkC,KACrB,SAACjC,EAAD,sBACA,SAACC,EAAD,UACGiC,EACCA,EAAOa,KAAI,SAAAC,GAAC,OAAI,wBAAgBA,EAAEC,MAATD,EAAEE,GAAf,KAEZ,gDAMR,UAAChD,EAAD,YACE,SAACC,EAAD,WACE,wDAEF,SAACA,EAAD,WACE,SAACT,EAAD,CAAeY,GAAG,OAAlB,qBAEF,SAACH,EAAD,WACE,SAACT,EAAD,CAAeY,GAAG,SAAlB,0BAGJ,SAAC,KAAD,SAKT,C","sources":["pages/MovieDetails/MovieDetails.styled.js","components/BackLink/BackLink.styled.js","components/BackLink/BackLink.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const WraperMovie = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 5px;\n  margin-bottom: 10px;\n`;\nexport const StyledNavLink = styled(NavLink)`\n  color: #212121;\n\n  &.active {\n    color: red;\n  }\n`;\nexport const StyledTitleMovie = styled.h2`\n  margin-bottom: 20px;\n`;\nexport const StyledUserScore = styled.p`\n  margin-bottom: 20px;\n`;\nexport const StyledOverview = styled.h3`\n  margin-bottom: 20px;\n`;\nexport const StyledOverviewText = styled.p`\n  margin-bottom: 20px;\n`;\nexport const StyledGenres = styled.h3`\n  margin-bottom: 20px;\n`;\nexport const StyledGenresList = styled.ul`\n  display: flex;\n  gap: 10px;\n  padding: 0;\n  margin-bottom: 20px;\n`;\nexport const StyledAdditionalLink = styled.ul`\n  border-bottom: 2px solid black;\n  border-top: 2px solid black;\n  margin-bottom: 20px;\n`;\nexport const StyledAdditionalItem = styled.li`\n  margin-bottom: 10px;\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledHomeItem = styled(Link)`\n  display: flex;\n  align-items: center;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledHomeItem } from './BackLink.styled';\n\nconst BackLink = ({ to, children }) => {\n  return <StyledHomeItem to={to}>{children}</StyledHomeItem>;\n};\n\nexport default BackLink;\n\nBackLink.propTypes = {\n  to: PropTypes.shape({\n    hash: PropTypes.string,\n    key: PropTypes.string,\n    pathname: PropTypes.string,\n    search: PropTypes.string,\n    state: PropTypes.shape({\n      hash: PropTypes.string,\n      key: PropTypes.string,\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n    }),\n  }),\n  children: PropTypes.array,\n};\n","import { useEffect, useRef, useState, lazy } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport api from '../../services';\nimport dateFormat from 'dateformat';\nimport { IoIosArrowRoundBack } from 'react-icons/io';\nimport { IconContext } from 'react-icons';\n\nimport {\n  WraperMovie,\n  StyledNavLink,\n  StyledTitleMovie,\n  StyledUserScore,\n  StyledOverview,\n  StyledOverviewText,\n  StyledGenres,\n  StyledGenresList,\n  StyledAdditionalLink,\n  StyledAdditionalItem,\n} from './MovieDetails.styled';\n\nimport BackLink from 'components/BackLink';\nimport Loading from 'components/Loading';\n\nconst Error = lazy(() => import('../../components/Error'));\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const {\n    current: { movieId },\n  } = useRef(useParams('movieId'));\n\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchData = async () => {\n      try {\n        const res = await api.fetchInfoMovie(movieId);\n        setMovie(res);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  const { title, release_date, overview, genres, poster_path, vote_average } =\n    movie;\n\n  return (\n    <div>\n      <IconContext.Provider value={{ size: '25px' }}>\n        <BackLink to={backLink.current}>\n          {<IoIosArrowRoundBack />}Go back\n        </BackLink>\n      </IconContext.Provider>\n\n      {error ? <Error message={error} /> : ''}\n\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <>\n          <WraperMovie>\n            <img\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/original${poster_path}`\n                  : ''\n              }\n              alt={`poster for the movie ${title}`}\n              width=\"250px\"\n              height=\"375px\"\n            />\n            <div>\n              <StyledTitleMovie>\n                {title} ({dateFormat(release_date, 'yyyy')})\n              </StyledTitleMovie>\n              <StyledUserScore>\n                User score: {Math.round(vote_average * 10)}%\n              </StyledUserScore>\n              <StyledOverview>Overview</StyledOverview>\n              <StyledOverviewText>{overview}</StyledOverviewText>\n              <StyledGenres>Genres</StyledGenres>\n              <StyledGenresList>\n                {genres ? (\n                  genres.map(g => <li key={g.id}>{g.name}</li>)\n                ) : (\n                  <li>Not Genres</li>\n                )}\n              </StyledGenresList>\n            </div>\n          </WraperMovie>\n\n          <StyledAdditionalLink>\n            <StyledAdditionalItem>\n              <h4>Addinational information</h4>\n            </StyledAdditionalItem>\n            <StyledAdditionalItem>\n              <StyledNavLink to=\"cast\">Cast</StyledNavLink>\n            </StyledAdditionalItem>\n            <StyledAdditionalItem>\n              <StyledNavLink to=\"review\">Review</StyledNavLink>\n            </StyledAdditionalItem>\n          </StyledAdditionalLink>\n          <Outlet />\n        </>\n      )}\n    </div>\n  );\n};\nexport default MovieDetails;\n"],"names":["WraperMovie","styled","StyledNavLink","NavLink","StyledTitleMovie","StyledUserScore","StyledOverview","StyledOverviewText","StyledGenres","StyledGenresList","StyledAdditionalLink","StyledAdditionalItem","StyledHomeItem","Link","to","children","Error","lazy","useState","movie","setMovie","isLoading","setIsLoading","error","setError","movieId","useRef","useParams","current","location","useLocation","backLink","state","from","useEffect","fetchData","api","res","message","title","release_date","overview","genres","poster_path","vote_average","value","size","Loading","src","alt","width","height","dateFormat","Math","round","map","g","name","id"],"sourceRoot":""}